@using MudBlazor
@using System
@using Presentation.Notifications.Components
@using Domain.Notifications.Entities
@using Application.Notifications
@using Application.Authentication
@using Presentation.Orders.Components
@using Domain.Orders.Entities
@using Domain.Donations.DTOs
@using Domain.Orders.DTOs
@using Application.Orders
@using Application.Users
@using Domain.Users.Entities

@inject IOrderService OrderService
@inject INotificationService NotifiactionServices
@inject IAuthenticationService AuthenticationService
@inject IPersonalUserService PersonalUserService


@if (_isLoading)
{
	<LoadingCardsComponent></LoadingCardsComponent>
}
else{
	<div class="d-flex">
		<div class="d-flex flex-column pa-1" style="overflow-y: scroll; height:700px">
			<div>
				<h3>Mensajes sin leer: @counter</h3>
				@foreach (var order in _orders)
				{
					@if (order.DonorId.Equals(actualUser))
					{
						<MensageDetails order=order></MensageDetails>
					}

				}
			</div>
		</div>
</div>
}


@code {

	private IEnumerable<Order?> _orders;
	private bool _isLoading = true;
	int counter = 0;
	public IList<Notification>? _notifications;
	private string? actualUser = null;
	private IList<InformacionDTO>? _userInformation;
	private IList<InformacionDTO>? _userBusinessInformation;
	

	protected override async Task OnInitializedAsync()
	{
		await getActualUser();
		_orders = await OrderService.GetOrderAsync();
		await AuthenticationService.GetValueAsync();         
		string? actualUser  = await AuthenticationService.GetLoggedUserEmail();
		_notifications =  await NotifiactionServices.GetNotificationByEmailAsync(actualUser!);
		counter = await NotifiactionServices.GetNumberUnRead(actualUser!);
		_userInformation = await OrderService.getInformationPersonalAsync();
		_userBusinessInformation = await OrderService.getInformationBusinessAsync();
		_userInformation.Concat(_userBusinessInformation);

		_isLoading = false;
	}

	public async Task getActualUser()
	{
		///<summary>
		/// It is responsible for obtaining the logged in user
		///</summary>
		await AuthenticationService.GetValueAsync();
		actualUser = await AuthenticationService.GetLoggedUserEmail();
		Console.WriteLine("AU: " + actualUser);
	}

	private async Task<PersonalUser?> getRecipientName(string recipientEmail)
	{
		///<summary>
		/// It is in charge of obtaining the user object of the beneficiary given the email
		///</summary>
		/// <param name="recipientEmail"></param>

		await AuthenticationService.GetValueAsync();
		return await PersonalUserService.GetPersonalUserByEmail(recipientEmail);
	}


	private string? getNameByEmail(string email)
	{
		return OrderService.getInformationByEmail(email, _userInformation).Result;
	}
}